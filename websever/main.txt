#include<string.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<unistd.h>
#include<errno.h>
#include<fcntl.h>
#include<sys/epoll.h>
#include<cstdio>
#include<signal.h>
#include"http_conn.h"
#include"locker.h"
#include"threadpool.h"

#define MAX_FD 65535 //文件描述符最大数
#define MAX_EVENT_NUMBER 10000 //监听最大

//添加信号捕捉
void addsig(int sig,void(handler)(int)){
    struct sigaction sa;
    memset(&sa,'\0', sizeof(sa));
    sa.sa_handler = handler;
    sigfillset(&sa.sa_mask);//处理该信号时，屏蔽所有其他信号，防止处理函数被打断。
    sigaction(sig,&sa,NULL);//类似QT的connect

}

//添加文件描述符到epoll中
extern int addfd(int epollfd,int fd,bool one_host);

//从epoll中删除文件描述符
extern int removefd(int epollfd, int fd);

int main(int argc,char* argv[]){
    if(argc <= 1){
        printf("按照如下格式运行:%s port_number\n",argv[0]);
        exit(-1);
    }

    //获取端口号
    int port= atoi(argv[1]);

    //sigpie信号处理
    addsig(SIGPIPE,SIG_IGN);//忽略断开连接信号



    //创建监听的套接字
    int listenfd = socket(PF_INET,SOCK_STREAM,0);//PF_INET:ipv4,SOCK_STREAM :TCP

    //设置端口复用 可以再Timewait 立即重复绑定
    int reuse=1;
    setsockopt(listenfd,SOL_SOCKET,SO_REUSEADDR,&reuse,sizeof(reuse));

    //绑定
    struct sockaddr_in address;
    address.sin_family =AF_INET;
    address.sin_addr.s_addr=INADDR_ANY; 
    address.sin_port = htons(port);//转换大端小端 并指定端口号
    if(bind(listenfd,(struct sockaddr*)&address,sizeof(address))==-1){
        printf("bind failure\n");
        exit(EXIT_FAILURE);      // 使用标准退出码
    }

    //监听
    if (listen(listenfd, 5) == -1) {
        perror("listen");
        exit(EXIT_FAILURE);
    }
//---------------------------------------------------------创建socket ->bind ->listen--------------------------
    ThreadPool<HttpConn> *pool=NULL;

    try{
        pool=new ThreadPool<HttpConn> ();
    }catch(...){
        exit(-1);
    }

    //创建一个数组用于保存所有的客户端信息
    HttpConn * users = new HttpConn[MAX_FD]; 

    //创建epoll对象,事件数组
    epoll_event events[MAX_EVENT_NUMBER];
    int epollfd = epoll_create(5);

    //套接字listenfd在epoll上注册读就绪事件
    addfd(epollfd,listenfd,false);

    //连接也记录一下epoll
    HttpConn::m_epollfd=epollfd;

    while(true){
        // printf("6666666666666\n");
        int num =epoll_wait(epollfd,events,MAX_EVENT_NUMBER,-1);//循环监听事件并返回个数
        if((num<0)&&(errno != EINTR)){
            printf("epoll failure\n");
            break;
        }
        //循环遍历事件数组
        for(int i=0;i<num;i++){
            int sockfd=events[i].data.fd;
            if(sockfd==listenfd){//是否是监听套接字（listenfd）上的连接请求事件   listenfd监听连接请求
                //有客户端连接进来
                sockaddr_in client_address;
                socklen_t client_addrlen =sizeof(client_address);
                int connfd=accept(listenfd,(struct sockaddr*)&client_address,&client_addrlen);//建立连接，生成双方通讯的新的套接字connfd

                if(HttpConn::m_user_count >=MAX_FD){
                    //目前连接数满了
                    //给客户端写一个信息：服务器内部正忙
                    close(connfd);
                    continue;
                }
                //将新的客户的数据与套接字初始化放到数组里
                users[connfd].init(connfd,client_address);
            }else if(events[i].events &(EPOLLRDHUP|EPOLLHUP|EPOLLERR)){
                //对方异常断开或者错误等事件
                printf("对方异常断开或者错误等事件\n");
                users[sockfd].close_conn();
            }else if(events[i].events &EPOLLIN){//客户端写入数据
                if(users[sockfd].read()){
                    //一次性把所有数据读完
                    pool->append(&users[sockfd]);
                }else{
                    users[sockfd].close_conn();
                }
            }else if(events[i].events &EPOLLOUT){//客户端请求数据
                printf("服务器返回数据\n");
                if(!users[sockfd].write()){
                    users[sockfd].close_conn();
                }
            }
        }

    }

    


    
    close(epollfd);
    close(listenfd);
    delete [] users;
    delete pool;
    return 0;

}